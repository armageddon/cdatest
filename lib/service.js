// Generated by CoffeeScript 1.6.1
var instrumentation,GET_Handler, POST_Handler, app, config, constants, express, expressWinston, resultHandler, server, winston;

var crypto = require('crypto');

express = require("express");
//metrics = require('metrics');
expressWinston = require("express-winston");
winston = require("winston");
config = require("./config");
constants = require("./constants");
//instrumentation = require("./instrumentation");
fs = require('fs');
//var restler = require('restler');

var guid = (function() {
  function s4() {
    return Math.floor((1 + Math.random()) * 0x10000)
               .toString(16)
               .substring(1);
  }
  return function() {
    return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
           s4() + '-' + s4() + s4() + s4();
  };
})();

function generateId() {
  var id = "";
  for(var i = 0; i<13; i++) {
    id += (Math.floor((Math.random() * 10))).toString()
  }
  console.log(id);
  return id;
}
var facilities = {1:'368815',2:'710142',3:'830151',4:'706215',5:'346351',6:'887733',7:'562333',8:'172842',9:'216524'};
function generateFacCode() {
  var fackey = Math.floor((Math.random()*9)+1);
  console.log("facility code: " + facilities[fackey]);
  return facilities[fackey];

}

function register() {
  var shasum = crypto.createHash('sha1');
  var count = 0;
  var doc = '';
  var data = {};
  var content = fs.readFileSync('./CDARequest.xml','utf-8');
  var mha = fs.readFileSync('./MHDMetadata.json', 'utf-8');
  //console.log(mha);
  var effdate = moment();
  effdate = effdate.subtract('days', Math.floor(Math.random() * 180)+1);
  console.log('EFF DATE: ' + effdate.format('YYYYMMDDhhmmss'));
  var dobdate = effdate.clone().subtract('years', 20 + Math.floor(Math.random() *20));
  console.log('DOB: '+ dobdate.format('YYYYMMDDhhmmss'));
  var duedate = effdate.clone().add('M', Math.floor(Math.random() * 8) + 1);
  console.log('DUE: ' + duedate.format('YYYYMMDDhhmmss'));
  var filename = guid();
  content = content.replace("%EFFDT%", effdate.format('YYYYMMDDhhmmss'));
  content = content.replace("%EFFDT%", effdate.format('YYYYMMDDhhmmss'));
  content = content.replace("%EFFDT%", effdate.format('YYYYMMDDhhmmss'));
  content = content.replace("%EFFDT%", effdate.format('YYYYMMDDhhmmss'));
  content = content.replace("%DDDT%", duedate.format('YYYYMMDD'));
  content = content.replace("%DOBDT", dobdate.format('YYYYMMDD'));




  content = content.replace("%ID%", generateId());
  content = content.replace("%FACCODE%", generateFacCode());
  //console.log(content);
  var length = content.length;
  shasum.update(content);
  var hash = shasum.digest('hex');
  console.log("LENGTH:" + length);
  console.log("HASH: " + hash);
  mha = mha.replace("%LENGTH%", length);
  mha = mha.replace("%HASH%", hash);
  fs.writeFileSync('./resource/'+filename+'.json', mha);
  fs.writeFileSync('./resource/'+filename+'.xml', content);
  postMultiPart("http://npr-him.jembi.org:5001/ws/rest/v1/registration/net.ihe/DocumentDossier",filename);
/* 
var cdastat = fs.statSync('./resource/'+filename+'.json')
  var mhdstat = fs.statSync('./resource/'+filename+'.json');
  restler.post("http://npr-him.jembi.org:5001/ws/rest/v1/registration/net.ihe/DocumentDossier", {
  //  restler.post("http://172.16.16.133:8088/ws/rest/v1/registration/net.ihe/DocumentDossier", {
    
    multipart: true,
    data: {
      "ihe-mhd-metadata": restler.file('./resource/'+filename+'.json', null, mhdstat.size, null, "application/json"),  
      "content": restler.file('./resource/'+filename+'.xml',null, cdastat.size, null, 'text/xml')
    }
  }).on('complete', function(data) {
    console.log('Completed Post');
  });
  */
//  var myreadfile =  function(file, type, callback) {
//    fs.readFile(file, 'utf8', function(err,content) {
//      callback(type, content);
//    });
//  }
}

var get = function() {
  restler.get("http://google.com").on('complete', function(response){
    //processResponse(response);
console.log("gotten");
  });
}
var postMultiPart = function(url, filename) {
 console.log("about to post");
  var cdastat = fs.statSync('./resource/'+filename+'.xml')
  var mhdstat = fs.statSync('./resource/'+filename+'.json');
//  var mhd val = fsreadSync(
  restler.post("http://npr-him.jembi.org:5001/ws/rest/v1/registration/net.ihe/DocumentDossier", {
  //  restler.post("http://172.16.16.133:8088/ws/rest/v1/registration/net.ihe/DocumentDossier", {
    multipart: true,
    data: {
      "ihe-mhd-metadata": restler.file('./resource/'+filename+'.json', null, cdastat.size, null, "application/json"),
      "content": restler.file('./resource/'+filename+'.xml',null, mhdstat.size, null, 'text/xml')
    }
  }).on('complete', function(data) {
    console.log('Completed Post');
  });

}

var Twit = require("twit");
var T = new Twit({
    consumer_key:         'iw5lbbutQ8waF7fl3YChuvnct'
  , consumer_secret:      'c1g6r3LuTHYpHLBLIW3lclJ582utK7XFEy6KfJ8MxAJVoYkv0i'
  , access_token:         '8976232-wjkJmo3vkIVpQFGa2PbJ0mdaluJ0SfjIZFD7arjHAn'
  , access_token_secret:  'e9ioFHa9SLNTKthZAu7thJgCRDhmuOoAop78wpIQsG5gQ'
})

//var stream = T.stream('statuses/sample',{language:'en,ja,tr,tl,in'});
console.log('sdsd');
var stream = T.stream('statuses/sample');
stream.on('tweet', function (tweet) {
  console.log(tweet);
//register();
//  var qs = {c: "metrics5", sc:tweet.lang};    
  //instrumentation.incrementCounter(qs, function() {});;
});


function post() {
  register();
setTimeout(function() {
    post();  // You used `el`, not `element`?
}, 60000);
}
//var instrumentation = new instrumentationM();

//post();

//register();
resultHandler = function(res, next, status, result) {
  if (status === constants.http.INTERNAL_ERROR) {
    return next(result);
  } else if (result) {
    return res.json(status, result);
  } else {
    return res.send(status);
  }
};

GET_Handler = function(handler) {

  config.getLogger().info("GET"); 
//  instrumentation.IncrementCounter();
  return function(req, res, next) {
    console.log(req.query);
 // return mongo.saveDocument("counter", doc, callback);
    return handler(req.query, function(status, result) {
      return resultHandler(res, next, status, result);
    });
  };
};

POST_Handler = function(handler) {

  return function(req, res, next) {
    return handler(req.query, req.body, function(status, result) {
      return resultHandler(res, next, status, result);
    });
  };
};

config.load();

app = express();
var allowCrossDomain = function(req, res, next) {
    res.header('Access-Control-Allow-Origin', "*");
    res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');
    res.header('Access-Control-Allow-Headers', 'Content-Type');

    next();
}
app.use(express.json());
app.use(allowCrossDomain);
app.use(expressWinston.logger({
  transports: [config.getLogger()]
}));

//app.get("/instrumentation/incrementCounter", GET_Handler(instrumentation.incrementCounter));
//app.get("/instrumentation/getData", GET_Handler(instrumentation.getData));
app.use(expressWinston.errorLogger({
  transports: config.loggerTransports()
}));

app.use(function(err, req, res, next) {
  return res.send(constants.http.INTERNAL_ERROR);
});

server = app.listen(process.env.PORT || constants.server.DEFAULT_PORT, function() {
  config.getLogger().info("Tweet service running on port " + (server.address().port));
  return config.getLogger().info("Environment: " + process.env.NODE_ENV);
});

exports.app = app;
